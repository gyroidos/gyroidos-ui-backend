//
// This file is part of GyroidOS
// Copyright(c) 2013 - 2020 Fraunhofer AISEC
// Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms and conditions of the GNU General Public License,
// version 2 (GPL 2), as published by the Free Software Foundation.
//
// This program is distributed in the hope it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GPL 2 license for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, see <http://www.gnu.org/licenses/>
//
// The full GNU General Public License is included in this distribution in
// the file called "COPYING".
//
// Contact Information:
// Fraunhofer AISEC <gyroidos@aisec.fraunhofer.de>

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: container.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContainerUsbType int32

const (
	ContainerUsbType_GENERIC   ContainerUsbType = 1
	ContainerUsbType_TOKEN     ContainerUsbType = 2
	ContainerUsbType_PIN_ENTRY ContainerUsbType = 3
)

// Enum value maps for ContainerUsbType.
var (
	ContainerUsbType_name = map[int32]string{
		1: "GENERIC",
		2: "TOKEN",
		3: "PIN_ENTRY",
	}
	ContainerUsbType_value = map[string]int32{
		"GENERIC":   1,
		"TOKEN":     2,
		"PIN_ENTRY": 3,
	}
)

func (x ContainerUsbType) Enum() *ContainerUsbType {
	p := new(ContainerUsbType)
	*p = x
	return p
}

func (x ContainerUsbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerUsbType) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[0].Descriptor()
}

func (ContainerUsbType) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[0]
}

func (x ContainerUsbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerUsbType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerUsbType(num)
	return nil
}

// Deprecated: Use ContainerUsbType.Descriptor instead.
func (ContainerUsbType) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{0}
}

// *
// Type of container KVM|CONTAINER
type ContainerType int32

const (
	ContainerType_CONTAINER ContainerType = 1
	ContainerType_KVM       ContainerType = 2
)

// Enum value maps for ContainerType.
var (
	ContainerType_name = map[int32]string{
		1: "CONTAINER",
		2: "KVM",
	}
	ContainerType_value = map[string]int32{
		"CONTAINER": 1,
		"KVM":       2,
	}
)

func (x ContainerType) Enum() *ContainerType {
	p := new(ContainerType)
	*p = x
	return p
}

func (x ContainerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerType) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[1].Descriptor()
}

func (ContainerType) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[1]
}

func (x ContainerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerType(num)
	return nil
}

// Deprecated: Use ContainerType.Descriptor instead.
func (ContainerType) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{1}
}

type ContainerTokenType int32

const (
	ContainerTokenType_NONE ContainerTokenType = 1
	ContainerTokenType_SOFT ContainerTokenType = 2
	ContainerTokenType_USB  ContainerTokenType = 3
)

// Enum value maps for ContainerTokenType.
var (
	ContainerTokenType_name = map[int32]string{
		1: "NONE",
		2: "SOFT",
		3: "USB",
	}
	ContainerTokenType_value = map[string]int32{
		"NONE": 1,
		"SOFT": 2,
		"USB":  3,
	}
)

func (x ContainerTokenType) Enum() *ContainerTokenType {
	p := new(ContainerTokenType)
	*p = x
	return p
}

func (x ContainerTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[2].Descriptor()
}

func (ContainerTokenType) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[2]
}

func (x ContainerTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerTokenType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerTokenType(num)
	return nil
}

// Deprecated: Use ContainerTokenType.Descriptor instead.
func (ContainerTokenType) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{2}
}

// *
// The various states that a container can be in.
// TODO must be kept in sync with definition in container.h!
type ContainerState int32

const (
	ContainerState_STOPPED   ContainerState = 1
	ContainerState_STARTING  ContainerState = 2
	ContainerState_BOOTING   ContainerState = 3
	ContainerState_RUNNING   ContainerState = 4
	ContainerState_FREEZING  ContainerState = 5
	ContainerState_FROZEN    ContainerState = 6
	ContainerState_ZOMBIE    ContainerState = 7
	ContainerState_SHUTDOWN  ContainerState = 8
	ContainerState_SETUP     ContainerState = 9
	ContainerState_REBOOTING ContainerState = 10
)

// Enum value maps for ContainerState.
var (
	ContainerState_name = map[int32]string{
		1:  "STOPPED",
		2:  "STARTING",
		3:  "BOOTING",
		4:  "RUNNING",
		5:  "FREEZING",
		6:  "FROZEN",
		7:  "ZOMBIE",
		8:  "SHUTDOWN",
		9:  "SETUP",
		10: "REBOOTING",
	}
	ContainerState_value = map[string]int32{
		"STOPPED":   1,
		"STARTING":  2,
		"BOOTING":   3,
		"RUNNING":   4,
		"FREEZING":  5,
		"FROZEN":    6,
		"ZOMBIE":    7,
		"SHUTDOWN":  8,
		"SETUP":     9,
		"REBOOTING": 10,
	}
)

func (x ContainerState) Enum() *ContainerState {
	p := new(ContainerState)
	*p = x
	return p
}

func (x ContainerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerState) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[3].Descriptor()
}

func (ContainerState) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[3]
}

func (x ContainerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerState(num)
	return nil
}

// Deprecated: Use ContainerState.Descriptor instead.
func (ContainerState) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{3}
}

// *
// Must be kept in sync with definition in container.h!
type ContainerConnectivity int32

const (
	ContainerConnectivity_OFFLINE         ContainerConnectivity = 1
	ContainerConnectivity_MOBILE_ONLY     ContainerConnectivity = 2
	ContainerConnectivity_WIFI_ONLY       ContainerConnectivity = 3
	ContainerConnectivity_MOBILE_AND_WIFI ContainerConnectivity = 4
)

// Enum value maps for ContainerConnectivity.
var (
	ContainerConnectivity_name = map[int32]string{
		1: "OFFLINE",
		2: "MOBILE_ONLY",
		3: "WIFI_ONLY",
		4: "MOBILE_AND_WIFI",
	}
	ContainerConnectivity_value = map[string]int32{
		"OFFLINE":         1,
		"MOBILE_ONLY":     2,
		"WIFI_ONLY":       3,
		"MOBILE_AND_WIFI": 4,
	}
)

func (x ContainerConnectivity) Enum() *ContainerConnectivity {
	p := new(ContainerConnectivity)
	*p = x
	return p
}

func (x ContainerConnectivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerConnectivity) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[4].Descriptor()
}

func (ContainerConnectivity) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[4]
}

func (x ContainerConnectivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerConnectivity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerConnectivity(num)
	return nil
}

// Deprecated: Use ContainerConnectivity.Descriptor instead.
func (ContainerConnectivity) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{4}
}

type ContainerTrust int32

const (
	ContainerTrust_SIGNED         ContainerTrust = 1
	ContainerTrust_LOCALLY_SIGNED ContainerTrust = 2
	ContainerTrust_UNSIGNED       ContainerTrust = 3
)

// Enum value maps for ContainerTrust.
var (
	ContainerTrust_name = map[int32]string{
		1: "SIGNED",
		2: "LOCALLY_SIGNED",
		3: "UNSIGNED",
	}
	ContainerTrust_value = map[string]int32{
		"SIGNED":         1,
		"LOCALLY_SIGNED": 2,
		"UNSIGNED":       3,
	}
)

func (x ContainerTrust) Enum() *ContainerTrust {
	p := new(ContainerTrust)
	*p = x
	return p
}

func (x ContainerTrust) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerTrust) Descriptor() protoreflect.EnumDescriptor {
	return file_container_proto_enumTypes[5].Descriptor()
}

func (ContainerTrust) Type() protoreflect.EnumType {
	return &file_container_proto_enumTypes[5]
}

func (x ContainerTrust) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerTrust) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerTrust(num)
	return nil
}

// Deprecated: Use ContainerTrust.Descriptor instead.
func (ContainerTrust) EnumDescriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{5}
}

type ContainerImageSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName *string `protobuf:"bytes,1,req,name=image_name,json=imageName" json:"image_name,omitempty"`  // virtual name of the image file in guestos
	ImageSize *uint64 `protobuf:"varint,2,req,name=image_size,json=imageSize" json:"image_size,omitempty"` // size (bytes) of the image file
	ImageFile *string `protobuf:"bytes,3,opt,name=image_file,json=imageFile" json:"image_file,omitempty"`  // name of alternat image file which overwrites image_name of guestos config
}

func (x *ContainerImageSize) Reset() {
	*x = ContainerImageSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerImageSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImageSize) ProtoMessage() {}

func (x *ContainerImageSize) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImageSize.ProtoReflect.Descriptor instead.
func (*ContainerImageSize) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerImageSize) GetImageName() string {
	if x != nil && x.ImageName != nil {
		return *x.ImageName
	}
	return ""
}

func (x *ContainerImageSize) GetImageSize() uint64 {
	if x != nil && x.ImageSize != nil {
		return *x.ImageSize
	}
	return 0
}

func (x *ContainerImageSize) GetImageFile() string {
	if x != nil && x.ImageFile != nil {
		return *x.ImageFile
	}
	return ""
}

type ContainerVnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName       *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`                     // name of virtual veth endpoint in container
	Configure    *bool   `protobuf:"varint,2,req,name=configure" json:"configure,omitempty"`                            // should cmld configure the interface or leave it unconfigured
	IfRootnsName *string `protobuf:"bytes,3,opt,name=if_rootns_name,json=ifRootnsName" json:"if_rootns_name,omitempty"` // name of virtual veth endpoint in rootns (will be autogenerated by cmld)
	IfMac        *string `protobuf:"bytes,4,opt,name=if_mac,json=ifMac" json:"if_mac,omitempty"`                        // mac of virtual veth endpoint inside container (will be autogenerated)
}

func (x *ContainerVnetConfig) Reset() {
	*x = ContainerVnetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerVnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerVnetConfig) ProtoMessage() {}

func (x *ContainerVnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerVnetConfig.ProtoReflect.Descriptor instead.
func (*ContainerVnetConfig) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerVnetConfig) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *ContainerVnetConfig) GetConfigure() bool {
	if x != nil && x.Configure != nil {
		return *x.Configure
	}
	return false
}

func (x *ContainerVnetConfig) GetIfRootnsName() string {
	if x != nil && x.IfRootnsName != nil {
		return *x.IfRootnsName
	}
	return ""
}

func (x *ContainerVnetConfig) GetIfMac() string {
	if x != nil && x.IfMac != nil {
		return *x.IfMac
	}
	return ""
}

type ContainerPnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netif     *string  `protobuf:"bytes,1,req,name=netif" json:"netif,omitempty"`                          // name or mac of physical network intarface mapped to container
	MacFilter []string `protobuf:"bytes,2,rep,name=mac_filter,json=macFilter" json:"mac_filter,omitempty"` // mac of allowed client devices on that netfif
}

func (x *ContainerPnetConfig) Reset() {
	*x = ContainerPnetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPnetConfig) ProtoMessage() {}

func (x *ContainerPnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPnetConfig.ProtoReflect.Descriptor instead.
func (*ContainerPnetConfig) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerPnetConfig) GetNetif() string {
	if x != nil && x.Netif != nil {
		return *x.Netif
	}
	return ""
}

func (x *ContainerPnetConfig) GetMacFilter() []string {
	if x != nil {
		return x.MacFilter
	}
	return nil
}

type ContainerUsbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *string           `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Serial *string           `protobuf:"bytes,2,req,name=serial" json:"serial,omitempty"`
	Assign *bool             `protobuf:"varint,3,req,name=assign,def=0" json:"assign,omitempty"`
	Type   *ContainerUsbType `protobuf:"varint,4,req,name=type,enum=main.ContainerUsbType,def=1" json:"type,omitempty"`
}

// Default values for ContainerUsbConfig fields.
const (
	Default_ContainerUsbConfig_Assign = bool(false)
	Default_ContainerUsbConfig_Type   = ContainerUsbType_GENERIC
)

func (x *ContainerUsbConfig) Reset() {
	*x = ContainerUsbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerUsbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerUsbConfig) ProtoMessage() {}

func (x *ContainerUsbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerUsbConfig.ProtoReflect.Descriptor instead.
func (*ContainerUsbConfig) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerUsbConfig) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ContainerUsbConfig) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *ContainerUsbConfig) GetAssign() bool {
	if x != nil && x.Assign != nil {
		return *x.Assign
	}
	return Default_ContainerUsbConfig_Assign
}

func (x *ContainerUsbConfig) GetType() ContainerUsbType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ContainerUsbConfig_Type
}

type ContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user configurable, non unique
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// name of GuestOS, e.g. android
	GuestOs *string `protobuf:"bytes,2,req,name=guest_os,json=guestOs" json:"guest_os,omitempty"`
	// (minimal) version of GuestOS; will be updated if container is started with a more recent GuestOS version.
	GuestosVersion *uint64 `protobuf:"varint,3,opt,name=guestos_version,json=guestosVersion" json:"guestos_version,omitempty"`
	// complete image sizes from GuestOS for user partitions
	ImageSizes []*ContainerImageSize `protobuf:"bytes,4,rep,name=image_sizes,json=imageSizes" json:"image_sizes,omitempty"`
	// ram limit of container, set ram_limit to 0 for unlimited ram
	RamLimit *uint32 `protobuf:"varint,5,opt,name=ram_limit,json=ramLimit,def=0" json:"ram_limit,omitempty"` // unit = MBytes
	Color    *uint32 `protobuf:"fixed32,6,req,name=color" json:"color,omitempty"`
	// type of container, e.g. KVM or CONTAINER
	Type       *ContainerType `protobuf:"varint,7,req,name=type,enum=main.ContainerType,def=1" json:"type,omitempty"`
	InitEnv    []string       `protobuf:"bytes,8,rep,name=init_env,json=initEnv" json:"init_env,omitempty"` // environment variables
	Userns     *bool          `protobuf:"varint,10,opt,name=userns,def=1" json:"userns,omitempty"`
	AssignCpus *string        `protobuf:"bytes,11,opt,name=assign_cpus,json=assignCpus" json:"assign_cpus,omitempty"` // cpus "m-n", e.g., "0-1"
	// Flags indicating the allows for containers:
	AllowAutostart *bool   `protobuf:"varint,17,opt,name=allow_autostart,json=allowAutostart,def=0" json:"allow_autostart,omitempty"` // TODO: add further features as necessary
	DnsServer      *string `protobuf:"bytes,21,opt,name=dns_server,json=dnsServer" json:"dns_server,omitempty"`
	Netns          *bool   `protobuf:"varint,22,opt,name=netns,def=1" json:"netns,omitempty"`
	// a list of network interfaces assigned to this container
	NetIfaces []*ContainerPnetConfig `protobuf:"bytes,23,rep,name=net_ifaces,json=netIfaces" json:"net_ifaces,omitempty"`
	// a list of devices explicitely allowed for this container
	AllowDev []string `protobuf:"bytes,25,rep,name=allow_dev,json=allowDev" json:"allow_dev,omitempty"`
	// a list of devices exclusively assigned to this container
	AssignDev []string `protobuf:"bytes,26,rep,name=assign_dev,json=assignDev" json:"assign_dev,omitempty"`
	// list of virtual network interface configuration
	VnetConfigs []*ContainerVnetConfig `protobuf:"bytes,27,rep,name=vnet_configs,json=vnetConfigs" json:"vnet_configs,omitempty"`
	// list of usb interface configuration
	UsbConfigs []*ContainerUsbConfig `protobuf:"bytes,28,rep,name=usb_configs,json=usbConfigs" json:"usb_configs,omitempty"`
	// number of pipes from c0 to this container
	// control erweitern: get container pipe fd
	// use bindmount mechanism from c_vol
	Fifos       []string            `protobuf:"bytes,29,rep,name=fifos" json:"fifos,omitempty"`
	TokenType   *ContainerTokenType `protobuf:"varint,30,req,name=token_type,json=tokenType,enum=main.ContainerTokenType,def=2" json:"token_type,omitempty"`
	UsbPinEntry *bool               `protobuf:"varint,31,opt,name=usb_pin_entry,json=usbPinEntry,def=0" json:"usb_pin_entry,omitempty"`
}

// Default values for ContainerConfig fields.
const (
	Default_ContainerConfig_RamLimit       = uint32(0)
	Default_ContainerConfig_Type           = ContainerType_CONTAINER
	Default_ContainerConfig_Userns         = bool(true)
	Default_ContainerConfig_AllowAutostart = bool(false)
	Default_ContainerConfig_Netns          = bool(true)
	Default_ContainerConfig_TokenType      = ContainerTokenType_SOFT
	Default_ContainerConfig_UsbPinEntry    = bool(false)
)

func (x *ContainerConfig) Reset() {
	*x = ContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerConfig) ProtoMessage() {}

func (x *ContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerConfig.ProtoReflect.Descriptor instead.
func (*ContainerConfig) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{4}
}

func (x *ContainerConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerConfig) GetGuestOs() string {
	if x != nil && x.GuestOs != nil {
		return *x.GuestOs
	}
	return ""
}

func (x *ContainerConfig) GetGuestosVersion() uint64 {
	if x != nil && x.GuestosVersion != nil {
		return *x.GuestosVersion
	}
	return 0
}

func (x *ContainerConfig) GetImageSizes() []*ContainerImageSize {
	if x != nil {
		return x.ImageSizes
	}
	return nil
}

func (x *ContainerConfig) GetRamLimit() uint32 {
	if x != nil && x.RamLimit != nil {
		return *x.RamLimit
	}
	return Default_ContainerConfig_RamLimit
}

func (x *ContainerConfig) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *ContainerConfig) GetType() ContainerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ContainerConfig_Type
}

func (x *ContainerConfig) GetInitEnv() []string {
	if x != nil {
		return x.InitEnv
	}
	return nil
}

func (x *ContainerConfig) GetUserns() bool {
	if x != nil && x.Userns != nil {
		return *x.Userns
	}
	return Default_ContainerConfig_Userns
}

func (x *ContainerConfig) GetAssignCpus() string {
	if x != nil && x.AssignCpus != nil {
		return *x.AssignCpus
	}
	return ""
}

func (x *ContainerConfig) GetAllowAutostart() bool {
	if x != nil && x.AllowAutostart != nil {
		return *x.AllowAutostart
	}
	return Default_ContainerConfig_AllowAutostart
}

func (x *ContainerConfig) GetDnsServer() string {
	if x != nil && x.DnsServer != nil {
		return *x.DnsServer
	}
	return ""
}

func (x *ContainerConfig) GetNetns() bool {
	if x != nil && x.Netns != nil {
		return *x.Netns
	}
	return Default_ContainerConfig_Netns
}

func (x *ContainerConfig) GetNetIfaces() []*ContainerPnetConfig {
	if x != nil {
		return x.NetIfaces
	}
	return nil
}

func (x *ContainerConfig) GetAllowDev() []string {
	if x != nil {
		return x.AllowDev
	}
	return nil
}

func (x *ContainerConfig) GetAssignDev() []string {
	if x != nil {
		return x.AssignDev
	}
	return nil
}

func (x *ContainerConfig) GetVnetConfigs() []*ContainerVnetConfig {
	if x != nil {
		return x.VnetConfigs
	}
	return nil
}

func (x *ContainerConfig) GetUsbConfigs() []*ContainerUsbConfig {
	if x != nil {
		return x.UsbConfigs
	}
	return nil
}

func (x *ContainerConfig) GetFifos() []string {
	if x != nil {
		return x.Fifos
	}
	return nil
}

func (x *ContainerConfig) GetTokenType() ContainerTokenType {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return Default_ContainerConfig_TokenType
}

func (x *ContainerConfig) GetUsbPinEntry() bool {
	if x != nil && x.UsbPinEntry != nil {
		return *x.UsbPinEntry
	}
	return Default_ContainerConfig_UsbPinEntry
}

// *
// Represents the status of a single container.
type ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       *string         `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name       *string         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Type       *ContainerType  `protobuf:"varint,3,req,name=type,enum=main.ContainerType" json:"type,omitempty"`
	State      *ContainerState `protobuf:"varint,4,req,name=state,enum=main.ContainerState" json:"state,omitempty"`
	Uptime     *uint64         `protobuf:"varint,5,req,name=uptime" json:"uptime,omitempty"`
	Created    *uint64         `protobuf:"varint,6,req,name=created" json:"created,omitempty"`
	Guestos    *string         `protobuf:"bytes,7,req,name=guestos" json:"guestos,omitempty"`
	TrustLevel *ContainerTrust `protobuf:"varint,8,req,name=trust_level,json=trustLevel,enum=main.ContainerTrust" json:"trust_level,omitempty"` // TBD more state values
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_container_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_container_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_container_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerStatus) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ContainerStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerStatus) GetType() ContainerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ContainerType_CONTAINER
}

func (x *ContainerStatus) GetState() ContainerState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ContainerState_STOPPED
}

func (x *ContainerStatus) GetUptime() uint64 {
	if x != nil && x.Uptime != nil {
		return *x.Uptime
	}
	return 0
}

func (x *ContainerStatus) GetCreated() uint64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *ContainerStatus) GetGuestos() string {
	if x != nil && x.Guestos != nil {
		return *x.Guestos
	}
	return ""
}

func (x *ContainerStatus) GetTrustLevel() ContainerTrust {
	if x != nil && x.TrustLevel != nil {
		return *x.TrustLevel
	}
	return ContainerTrust_SIGNED
}

var File_container_proto protoreflect.FileDescriptor

var file_container_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x71, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x66, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x66, 0x52, 0x6f, 0x6f, 0x74, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x66, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x66, 0x4d, 0x61, 0x63, 0x22, 0x4a, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x50, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x65, 0x74, 0x69, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65,
	0x74, 0x69, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x62, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x06, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x09,
	0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x07, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x45, 0x6e,
	0x76, 0x12, 0x1c, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x70, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x50, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x49,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x76, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44,
	0x65, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x65, 0x76,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x65,
	0x76, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x76, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x39, 0x0a, 0x0b, 0x75, 0x73, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x75, 0x73, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x66, 0x6f, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x66, 0x6f, 0x73,
	0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04,
	0x53, 0x4f, 0x46, 0x54, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x0d, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x75,
	0x73, 0x62, 0x50, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15,
	0x22, 0x91, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x12, 0x35, 0x0a,
	0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x2a, 0x39, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x03, 0x2a,
	0x27, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x4b, 0x56, 0x4d, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x46, 0x54,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x42, 0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x5a, 0x4f, 0x4d, 0x42, 0x49, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x2a, 0x59, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x46, 0x49,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x42, 0x24, 0x0a, 0x1b,
	0x64, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x75, 0x6e, 0x68, 0x6f, 0x66, 0x65, 0x72, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x63, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x5a, 0x05, 0x6d, 0x61, 0x69,
	0x6e, 0x2f,
}

var (
	file_container_proto_rawDescOnce sync.Once
	file_container_proto_rawDescData = file_container_proto_rawDesc
)

func file_container_proto_rawDescGZIP() []byte {
	file_container_proto_rawDescOnce.Do(func() {
		file_container_proto_rawDescData = protoimpl.X.CompressGZIP(file_container_proto_rawDescData)
	})
	return file_container_proto_rawDescData
}

var file_container_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_container_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_container_proto_goTypes = []interface{}{
	(ContainerUsbType)(0),       // 0: main.ContainerUsbType
	(ContainerType)(0),          // 1: main.ContainerType
	(ContainerTokenType)(0),     // 2: main.ContainerTokenType
	(ContainerState)(0),         // 3: main.ContainerState
	(ContainerConnectivity)(0),  // 4: main.ContainerConnectivity
	(ContainerTrust)(0),         // 5: main.ContainerTrust
	(*ContainerImageSize)(nil),  // 6: main.ContainerImageSize
	(*ContainerVnetConfig)(nil), // 7: main.ContainerVnetConfig
	(*ContainerPnetConfig)(nil), // 8: main.ContainerPnetConfig
	(*ContainerUsbConfig)(nil),  // 9: main.ContainerUsbConfig
	(*ContainerConfig)(nil),     // 10: main.ContainerConfig
	(*ContainerStatus)(nil),     // 11: main.ContainerStatus
}
var file_container_proto_depIdxs = []int32{
	0,  // 0: main.ContainerUsbConfig.type:type_name -> main.ContainerUsbType
	6,  // 1: main.ContainerConfig.image_sizes:type_name -> main.ContainerImageSize
	1,  // 2: main.ContainerConfig.type:type_name -> main.ContainerType
	8,  // 3: main.ContainerConfig.net_ifaces:type_name -> main.ContainerPnetConfig
	7,  // 4: main.ContainerConfig.vnet_configs:type_name -> main.ContainerVnetConfig
	9,  // 5: main.ContainerConfig.usb_configs:type_name -> main.ContainerUsbConfig
	2,  // 6: main.ContainerConfig.token_type:type_name -> main.ContainerTokenType
	1,  // 7: main.ContainerStatus.type:type_name -> main.ContainerType
	3,  // 8: main.ContainerStatus.state:type_name -> main.ContainerState
	5,  // 9: main.ContainerStatus.trust_level:type_name -> main.ContainerTrust
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_container_proto_init() }
func file_container_proto_init() {
	if File_container_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_container_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerImageSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_container_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerVnetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_container_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerPnetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_container_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerUsbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_container_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_container_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_container_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_container_proto_goTypes,
		DependencyIndexes: file_container_proto_depIdxs,
		EnumInfos:         file_container_proto_enumTypes,
		MessageInfos:      file_container_proto_msgTypes,
	}.Build()
	File_container_proto = out.File
	file_container_proto_rawDesc = nil
	file_container_proto_goTypes = nil
	file_container_proto_depIdxs = nil
}
