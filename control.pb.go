//
// This file is part of GyroidOS
// Copyright(c) 2013 - 2021 Fraunhofer AISEC
// Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
//
// This program is free software; you can redistribute it and/or modify it
// under the terms and conditions of the GNU General Public License,
// version 2 (GPL 2), as published by the Free Software Foundation.
//
// This program is distributed in the hope it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GPL 2 license for more details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, see <http://www.gnu.org/licenses/>
//
// The full GNU General Public License is included in this distribution in
// the file called "COPYING".
//
// Contact Information:
// Fraunhofer AISEC <gyroidos@aisec.fraunhofer.de>

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: control.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControllerToDaemon_Command int32

const (
	// Responds with [guestos_configs] which includes a list of all GuestOS configs
	// installed on the device.
	ControllerToDaemon_LIST_GUESTOS_CONFIGS ControllerToDaemon_Command = 1 // -> [guestos_configs]
	// Responds with [container_uuid] with the UUIDs of all containers
	// available on the device.
	ControllerToDaemon_LIST_CONTAINERS ControllerToDaemon_Command = 2 // -> [container_uuid]
	// Responds [container_status] with the ContainerStatus
	// for each specified container in [container_uuid],
	// or for all containers if [container_uuid] is empty.
	ControllerToDaemon_GET_CONTAINER_STATUS ControllerToDaemon_Command = 3 // [container_uuid] -> [container_status]
	// Responds [container_config] with the ContainerStatus
	// for each specified container in [container_uuid],
	// or for all containers if [container_uuid] is empty.
	// Also fills [container_uuids] with the corresponding container UUIDs.
	ControllerToDaemon_GET_CONTAINER_CONFIG ControllerToDaemon_Command = 4 // [container_uuid] -> [container_config]
	// Returns logfiles stored in LOGFILE_DIR
	ControllerToDaemon_GET_LAST_LOG ControllerToDaemon_Command = 5
	// Push new GuestOS config. Needs [guestos_config_*].
	// Images will be updated later.
	ControllerToDaemon_PUSH_GUESTOS_CONFIG ControllerToDaemon_Command = 20
	// Reloads containers from config files, e.g. if a new container should be created
	ControllerToDaemon_RELOAD_CONTAINERS ControllerToDaemon_Command = 21
	// Creates a container, answers with CONTAINER_CONFIGS
	ControllerToDaemon_CREATE_CONTAINER ControllerToDaemon_Command = 22
	// Removes container config and destroys created container image files
	ControllerToDaemon_REMOVE_CONTAINER ControllerToDaemon_Command = 23
	// Registers a root certificate for loclly signed GuestOSes.
	ControllerToDaemon_REGISTER_LOCALCA ControllerToDaemon_Command = 24
	// Registers a root certificate for signed GuestOSes.
	ControllerToDaemon_REGISTER_NEWCA ControllerToDaemon_Command = 25
	// Removes a guestos including images, configs and signature files
	ControllerToDaemon_REMOVE_GUESTOS ControllerToDaemon_Command = 26
	// Wipes the entire device (i.e. all containers)
	// TODO: Only wipes containers, not e.g. GuestOSes and device.conf.
	ControllerToDaemon_WIPE_DEVICE ControllerToDaemon_Command = 30
	// reboot the device
	ControllerToDaemon_REBOOT_DEVICE ControllerToDaemon_Command = 31
	// Set the device to provisioned state
	ControllerToDaemon_SET_PROVISIONED ControllerToDaemon_Command = 32
	// Pulls the device csr (provisioning)
	ControllerToDaemon_PULL_DEVICE_CSR ControllerToDaemon_Command = 40
	// Pushes bach the device certificate (provisioning)
	ControllerToDaemon_PUSH_DEVICE_CERT ControllerToDaemon_Command = 41
	// deprecated. Tokens are assigned per container.
	ControllerToDaemon_CHANGE_DEVICE_PIN ControllerToDaemon_Command = 42
	// Starts a container. Also needs [start_params].
	ControllerToDaemon_CONTAINER_START ControllerToDaemon_Command = 101
	// Stops a container.
	ControllerToDaemon_CONTAINER_STOP ControllerToDaemon_Command = 102
	// Switches to a container.
	ControllerToDaemon_CONTAINER_SWITCH ControllerToDaemon_Command = 103
	// Freezes a container.
	ControllerToDaemon_CONTAINER_FREEZE ControllerToDaemon_Command = 104
	// Unfreezes a container.
	ControllerToDaemon_CONTAINER_UNFREEZE ControllerToDaemon_Command = 105
	// Wipes a container.
	ControllerToDaemon_CONTAINER_WIPE ControllerToDaemon_Command = 106
	// TODO
	ControllerToDaemon_CONTAINER_SNAPSHOT   ControllerToDaemon_Command = 107
	ControllerToDaemon_CONTAINER_ALLOWAUDIO ControllerToDaemon_Command = 108
	ControllerToDaemon_CONTAINER_DENYAUDIO  ControllerToDaemon_Command = 109
	// Assigns a network interface to a container. Also needs [assign_iface_params]
	ControllerToDaemon_CONTAINER_ASSIGNIFACE ControllerToDaemon_Command = 110
	// Unassigns a network interface from a container. Also needs [assign_iface_params]
	ControllerToDaemon_CONTAINER_UNASSIGNIFACE ControllerToDaemon_Command = 111
	// List network interfaces assigned to a container
	ControllerToDaemon_CONTAINER_LIST_IFACES ControllerToDaemon_Command = 112
	// Execute command inside container
	ControllerToDaemon_CONTAINER_EXEC_CMD ControllerToDaemon_Command = 113
	// Send input to exec'ed porgram
	ControllerToDaemon_CONTAINER_EXEC_INPUT ControllerToDaemon_Command = 114
	// Starts a container. Also needs ontainer_config_file.
	ControllerToDaemon_CONTAINER_UPDATE_CONFIG ControllerToDaemon_Command = 115
	// Change the PIN of the token taht is assigned to the token.
	ControllerToDaemon_CONTAINER_CHANGE_TOKEN_PIN ControllerToDaemon_Command = 116
	// Request if CMLD handles pin input
	ControllerToDaemon_CONTAINER_CMLD_HANDLES_PIN ControllerToDaemon_Command = 117
)

// Enum value maps for ControllerToDaemon_Command.
var (
	ControllerToDaemon_Command_name = map[int32]string{
		1:   "LIST_GUESTOS_CONFIGS",
		2:   "LIST_CONTAINERS",
		3:   "GET_CONTAINER_STATUS",
		4:   "GET_CONTAINER_CONFIG",
		5:   "GET_LAST_LOG",
		20:  "PUSH_GUESTOS_CONFIG",
		21:  "RELOAD_CONTAINERS",
		22:  "CREATE_CONTAINER",
		23:  "REMOVE_CONTAINER",
		24:  "REGISTER_LOCALCA",
		25:  "REGISTER_NEWCA",
		26:  "REMOVE_GUESTOS",
		30:  "WIPE_DEVICE",
		31:  "REBOOT_DEVICE",
		32:  "SET_PROVISIONED",
		40:  "PULL_DEVICE_CSR",
		41:  "PUSH_DEVICE_CERT",
		42:  "CHANGE_DEVICE_PIN",
		101: "CONTAINER_START",
		102: "CONTAINER_STOP",
		103: "CONTAINER_SWITCH",
		104: "CONTAINER_FREEZE",
		105: "CONTAINER_UNFREEZE",
		106: "CONTAINER_WIPE",
		107: "CONTAINER_SNAPSHOT",
		108: "CONTAINER_ALLOWAUDIO",
		109: "CONTAINER_DENYAUDIO",
		110: "CONTAINER_ASSIGNIFACE",
		111: "CONTAINER_UNASSIGNIFACE",
		112: "CONTAINER_LIST_IFACES",
		113: "CONTAINER_EXEC_CMD",
		114: "CONTAINER_EXEC_INPUT",
		115: "CONTAINER_UPDATE_CONFIG",
		116: "CONTAINER_CHANGE_TOKEN_PIN",
		117: "CONTAINER_CMLD_HANDLES_PIN",
	}
	ControllerToDaemon_Command_value = map[string]int32{
		"LIST_GUESTOS_CONFIGS":       1,
		"LIST_CONTAINERS":            2,
		"GET_CONTAINER_STATUS":       3,
		"GET_CONTAINER_CONFIG":       4,
		"GET_LAST_LOG":               5,
		"PUSH_GUESTOS_CONFIG":        20,
		"RELOAD_CONTAINERS":          21,
		"CREATE_CONTAINER":           22,
		"REMOVE_CONTAINER":           23,
		"REGISTER_LOCALCA":           24,
		"REGISTER_NEWCA":             25,
		"REMOVE_GUESTOS":             26,
		"WIPE_DEVICE":                30,
		"REBOOT_DEVICE":              31,
		"SET_PROVISIONED":            32,
		"PULL_DEVICE_CSR":            40,
		"PUSH_DEVICE_CERT":           41,
		"CHANGE_DEVICE_PIN":          42,
		"CONTAINER_START":            101,
		"CONTAINER_STOP":             102,
		"CONTAINER_SWITCH":           103,
		"CONTAINER_FREEZE":           104,
		"CONTAINER_UNFREEZE":         105,
		"CONTAINER_WIPE":             106,
		"CONTAINER_SNAPSHOT":         107,
		"CONTAINER_ALLOWAUDIO":       108,
		"CONTAINER_DENYAUDIO":        109,
		"CONTAINER_ASSIGNIFACE":      110,
		"CONTAINER_UNASSIGNIFACE":    111,
		"CONTAINER_LIST_IFACES":      112,
		"CONTAINER_EXEC_CMD":         113,
		"CONTAINER_EXEC_INPUT":       114,
		"CONTAINER_UPDATE_CONFIG":    115,
		"CONTAINER_CHANGE_TOKEN_PIN": 116,
		"CONTAINER_CMLD_HANDLES_PIN": 117,
	}
)

func (x ControllerToDaemon_Command) Enum() *ControllerToDaemon_Command {
	p := new(ControllerToDaemon_Command)
	*p = x
	return p
}

func (x ControllerToDaemon_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControllerToDaemon_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_control_proto_enumTypes[0].Descriptor()
}

func (ControllerToDaemon_Command) Type() protoreflect.EnumType {
	return &file_control_proto_enumTypes[0]
}

func (x ControllerToDaemon_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ControllerToDaemon_Command) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ControllerToDaemon_Command(num)
	return nil
}

// Deprecated: Use ControllerToDaemon_Command.Descriptor instead.
func (ControllerToDaemon_Command) EnumDescriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{2, 0}
}

type DaemonToController_Code int32

const (
	DaemonToController_GUESTOS_CONFIGS_LIST       DaemonToController_Code = 1  // -> [guestos_config]
	DaemonToController_CONTAINERS_LIST            DaemonToController_Code = 2  // -> [container_uuid]
	DaemonToController_CONTAINER_STATUS           DaemonToController_Code = 3  // -> [container_status]
	DaemonToController_CONTAINER_CONFIG           DaemonToController_Code = 4  // -> [container_config], [container_uuids]
	DaemonToController_CONTAINER_IFACES           DaemonToController_Code = 5  // -> [container_ifaces]
	DaemonToController_CONTAINER_CMLD_HANDLES_PIN DaemonToController_Code = 7  // -> [container_cmld_handles_pin]
	DaemonToController_LOG_MESSAGE                DaemonToController_Code = 12 // -> [log_message]
	DaemonToController_RESPONSE                   DaemonToController_Code = 13 // -> [response]
	DaemonToController_EXEC_END                   DaemonToController_Code = 14
	DaemonToController_EXEC_OUTPUT                DaemonToController_Code = 15
	DaemonToController_DEVICE_CSR                 DaemonToController_Code = 40 // -> [device_csr]
	// Log-on the device onto the backend (not applicable for cmdline tool).
	DaemonToController_LOGON_DEVICE DaemonToController_Code = 200 // [device_uuid] ->
)

// Enum value maps for DaemonToController_Code.
var (
	DaemonToController_Code_name = map[int32]string{
		1:   "GUESTOS_CONFIGS_LIST",
		2:   "CONTAINERS_LIST",
		3:   "CONTAINER_STATUS",
		4:   "CONTAINER_CONFIG",
		5:   "CONTAINER_IFACES",
		7:   "CONTAINER_CMLD_HANDLES_PIN",
		12:  "LOG_MESSAGE",
		13:  "RESPONSE",
		14:  "EXEC_END",
		15:  "EXEC_OUTPUT",
		40:  "DEVICE_CSR",
		200: "LOGON_DEVICE",
	}
	DaemonToController_Code_value = map[string]int32{
		"GUESTOS_CONFIGS_LIST":       1,
		"CONTAINERS_LIST":            2,
		"CONTAINER_STATUS":           3,
		"CONTAINER_CONFIG":           4,
		"CONTAINER_IFACES":           5,
		"CONTAINER_CMLD_HANDLES_PIN": 7,
		"LOG_MESSAGE":                12,
		"RESPONSE":                   13,
		"EXEC_END":                   14,
		"EXEC_OUTPUT":                15,
		"DEVICE_CSR":                 40,
		"LOGON_DEVICE":               200,
	}
)

func (x DaemonToController_Code) Enum() *DaemonToController_Code {
	p := new(DaemonToController_Code)
	*p = x
	return p
}

func (x DaemonToController_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonToController_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_control_proto_enumTypes[1].Descriptor()
}

func (DaemonToController_Code) Type() protoreflect.EnumType {
	return &file_control_proto_enumTypes[1]
}

func (x DaemonToController_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DaemonToController_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DaemonToController_Code(num)
	return nil
}

// Deprecated: Use DaemonToController_Code.Descriptor instead.
func (DaemonToController_Code) EnumDescriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3, 0}
}

type DaemonToController_Response int32

const (
	DaemonToController_CONTAINER_START_OK                DaemonToController_Response = 1
	DaemonToController_CONTAINER_START_LOCK_FAILED       DaemonToController_Response = 2
	DaemonToController_CONTAINER_START_UNLOCK_FAILED     DaemonToController_Response = 3
	DaemonToController_CONTAINER_START_PASSWD_WRONG      DaemonToController_Response = 4
	DaemonToController_CONTAINER_START_EEXIST            DaemonToController_Response = 6
	DaemonToController_CONTAINER_START_EINTERNAL         DaemonToController_Response = 13
	DaemonToController_CONTAINER_START_TOKEN_UNINIT      DaemonToController_Response = 18
	DaemonToController_CONTAINER_START_TOKEN_UNPAIRED    DaemonToController_Response = 19
	DaemonToController_CONTAINER_STOP_OK                 DaemonToController_Response = 21
	DaemonToController_CONTAINER_STOP_LOCK_FAILED        DaemonToController_Response = 22
	DaemonToController_CONTAINER_STOP_UNLOCK_FAILED      DaemonToController_Response = 23
	DaemonToController_CONTAINER_STOP_PASSWD_WRONG       DaemonToController_Response = 24
	DaemonToController_CONTAINER_STOP_FAILED_NOT_RUNNING DaemonToController_Response = 25
	DaemonToController_CONTAINER_CTRL_EINTERNAL          DaemonToController_Response = 26
	DaemonToController_CONTAINER_CHANGE_PIN_FAILED       DaemonToController_Response = 8
	DaemonToController_CONTAINER_CHANGE_PIN_SUCCESSFUL   DaemonToController_Response = 9
	DaemonToController_CONTAINER_LOCKED_TILL_REBOOT      DaemonToController_Response = 5
	DaemonToController_CONTAINER_USB_PIN_ENTRY_FAIL      DaemonToController_Response = 20
	DaemonToController_DEVICE_PROVISIONING_ERROR         DaemonToController_Response = 10
	DaemonToController_DEVICE_CERT_ERROR                 DaemonToController_Response = 11
	DaemonToController_DEVICE_CERT_OK                    DaemonToController_Response = 12
	DaemonToController_GUESTOS_MGR_INSTALL_STARTED       DaemonToController_Response = 14
	DaemonToController_GUESTOS_MGR_INSTALL_FAILED        DaemonToController_Response = 15
	DaemonToController_GUESTOS_MGR_INSTALL_WAITING       DaemonToController_Response = 16
	DaemonToController_GUESTOS_MGR_INSTALL_COMPLETED     DaemonToController_Response = 17
	DaemonToController_GUESTOS_MGR_REGISTER_CA_ERROR     DaemonToController_Response = 27
	DaemonToController_GUESTOS_MGR_REGISTER_CA_OK        DaemonToController_Response = 28
	DaemonToController_CMD_UNSUPPORTED                   DaemonToController_Response = 7
	DaemonToController_CMD_OK                            DaemonToController_Response = 29
	DaemonToController_CMD_FAILED                        DaemonToController_Response = 30
)

// Enum value maps for DaemonToController_Response.
var (
	DaemonToController_Response_name = map[int32]string{
		1:  "CONTAINER_START_OK",
		2:  "CONTAINER_START_LOCK_FAILED",
		3:  "CONTAINER_START_UNLOCK_FAILED",
		4:  "CONTAINER_START_PASSWD_WRONG",
		6:  "CONTAINER_START_EEXIST",
		13: "CONTAINER_START_EINTERNAL",
		18: "CONTAINER_START_TOKEN_UNINIT",
		19: "CONTAINER_START_TOKEN_UNPAIRED",
		21: "CONTAINER_STOP_OK",
		22: "CONTAINER_STOP_LOCK_FAILED",
		23: "CONTAINER_STOP_UNLOCK_FAILED",
		24: "CONTAINER_STOP_PASSWD_WRONG",
		25: "CONTAINER_STOP_FAILED_NOT_RUNNING",
		26: "CONTAINER_CTRL_EINTERNAL",
		8:  "CONTAINER_CHANGE_PIN_FAILED",
		9:  "CONTAINER_CHANGE_PIN_SUCCESSFUL",
		5:  "CONTAINER_LOCKED_TILL_REBOOT",
		20: "CONTAINER_USB_PIN_ENTRY_FAIL",
		10: "DEVICE_PROVISIONING_ERROR",
		11: "DEVICE_CERT_ERROR",
		12: "DEVICE_CERT_OK",
		14: "GUESTOS_MGR_INSTALL_STARTED",
		15: "GUESTOS_MGR_INSTALL_FAILED",
		16: "GUESTOS_MGR_INSTALL_WAITING",
		17: "GUESTOS_MGR_INSTALL_COMPLETED",
		27: "GUESTOS_MGR_REGISTER_CA_ERROR",
		28: "GUESTOS_MGR_REGISTER_CA_OK",
		7:  "CMD_UNSUPPORTED",
		29: "CMD_OK",
		30: "CMD_FAILED",
	}
	DaemonToController_Response_value = map[string]int32{
		"CONTAINER_START_OK":                1,
		"CONTAINER_START_LOCK_FAILED":       2,
		"CONTAINER_START_UNLOCK_FAILED":     3,
		"CONTAINER_START_PASSWD_WRONG":      4,
		"CONTAINER_START_EEXIST":            6,
		"CONTAINER_START_EINTERNAL":         13,
		"CONTAINER_START_TOKEN_UNINIT":      18,
		"CONTAINER_START_TOKEN_UNPAIRED":    19,
		"CONTAINER_STOP_OK":                 21,
		"CONTAINER_STOP_LOCK_FAILED":        22,
		"CONTAINER_STOP_UNLOCK_FAILED":      23,
		"CONTAINER_STOP_PASSWD_WRONG":       24,
		"CONTAINER_STOP_FAILED_NOT_RUNNING": 25,
		"CONTAINER_CTRL_EINTERNAL":          26,
		"CONTAINER_CHANGE_PIN_FAILED":       8,
		"CONTAINER_CHANGE_PIN_SUCCESSFUL":   9,
		"CONTAINER_LOCKED_TILL_REBOOT":      5,
		"CONTAINER_USB_PIN_ENTRY_FAIL":      20,
		"DEVICE_PROVISIONING_ERROR":         10,
		"DEVICE_CERT_ERROR":                 11,
		"DEVICE_CERT_OK":                    12,
		"GUESTOS_MGR_INSTALL_STARTED":       14,
		"GUESTOS_MGR_INSTALL_FAILED":        15,
		"GUESTOS_MGR_INSTALL_WAITING":       16,
		"GUESTOS_MGR_INSTALL_COMPLETED":     17,
		"GUESTOS_MGR_REGISTER_CA_ERROR":     27,
		"GUESTOS_MGR_REGISTER_CA_OK":        28,
		"CMD_UNSUPPORTED":                   7,
		"CMD_OK":                            29,
		"CMD_FAILED":                        30,
	}
)

func (x DaemonToController_Response) Enum() *DaemonToController_Response {
	p := new(DaemonToController_Response)
	*p = x
	return p
}

func (x DaemonToController_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonToController_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_control_proto_enumTypes[2].Descriptor()
}

func (DaemonToController_Response) Type() protoreflect.EnumType {
	return &file_control_proto_enumTypes[2]
}

func (x DaemonToController_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DaemonToController_Response) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DaemonToController_Response(num)
	return nil
}

// Deprecated: Use DaemonToController_Response.Descriptor instead.
func (DaemonToController_Response) EnumDescriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3, 1}
}

type ContainerStartParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: This message may change in the future!
	Key      *string `protobuf:"bytes,1,opt,name=key,def=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" json:"key,omitempty"`
	NoSwitch *bool   `protobuf:"varint,2,opt,name=no_switch,json=noSwitch,def=0" json:"no_switch,omitempty"`
	Setup    *bool   `protobuf:"varint,3,opt,name=setup,def=0" json:"setup,omitempty"`
}

// Default values for ContainerStartParams fields.
const (
	Default_ContainerStartParams_Key      = string("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	Default_ContainerStartParams_NoSwitch = bool(false)
	Default_ContainerStartParams_Setup    = bool(false)
)

func (x *ContainerStartParams) Reset() {
	*x = ContainerStartParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStartParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStartParams) ProtoMessage() {}

func (x *ContainerStartParams) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStartParams.ProtoReflect.Descriptor instead.
func (*ContainerStartParams) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{0}
}

func (x *ContainerStartParams) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return Default_ContainerStartParams_Key
}

func (x *ContainerStartParams) GetNoSwitch() bool {
	if x != nil && x.NoSwitch != nil {
		return *x.NoSwitch
	}
	return Default_ContainerStartParams_NoSwitch
}

func (x *ContainerStartParams) GetSetup() bool {
	if x != nil && x.Setup != nil {
		return *x.Setup
	}
	return Default_ContainerStartParams_Setup
}

type AssignInterfaceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfaceName  *string `protobuf:"bytes,1,opt,name=iface_name,json=ifaceName" json:"iface_name,omitempty"`
	Persistent *bool   `protobuf:"varint,2,opt,name=persistent,def=0" json:"persistent,omitempty"`
}

// Default values for AssignInterfaceParams fields.
const (
	Default_AssignInterfaceParams_Persistent = bool(false)
)

func (x *AssignInterfaceParams) Reset() {
	*x = AssignInterfaceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignInterfaceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignInterfaceParams) ProtoMessage() {}

func (x *AssignInterfaceParams) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignInterfaceParams.ProtoReflect.Descriptor instead.
func (*AssignInterfaceParams) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{1}
}

func (x *AssignInterfaceParams) GetIfaceName() string {
	if x != nil && x.IfaceName != nil {
		return *x.IfaceName
	}
	return ""
}

func (x *AssignInterfaceParams) GetPersistent() bool {
	if x != nil && x.Persistent != nil {
		return *x.Persistent
	}
	return Default_AssignInterfaceParams_Persistent
}

// *
// Control message sent to and processed by the cml-daemon on the device.
type ControllerToDaemon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *ControllerToDaemon_Command `protobuf:"varint,1,req,name=command,enum=main.ControllerToDaemon_Command" json:"command,omitempty"`
	// Container
	ContainerUuids             []string               `protobuf:"bytes,10,rep,name=container_uuids,json=containerUuids" json:"container_uuids,omitempty"`                                       // container UUID(s) for GET_CONTAINER_* and CONTAINER_*
	ContainerStartParams       *ContainerStartParams  `protobuf:"bytes,11,opt,name=container_start_params,json=containerStartParams" json:"container_start_params,omitempty"`                   // start parameters for CONTAINER_START
	AssignIfaceParams          *AssignInterfaceParams `protobuf:"bytes,12,opt,name=assign_iface_params,json=assignIfaceParams" json:"assign_iface_params,omitempty"`                            // parameter for CONTAINER_ASSIGNIFACE / CONTAINER_UNASSIGNIFACE
	ContainerConfigFile        []byte                 `protobuf:"bytes,13,opt,name=container_config_file,json=containerConfigFile" json:"container_config_file,omitempty"`                      // new container config for CREATE_CNTAINER
	ContainerConfigSignature   []byte                 `protobuf:"bytes,18,opt,name=container_config_signature,json=containerConfigSignature" json:"container_config_signature,omitempty"`       // signature of the container config file
	ContainerConfigCertificate []byte                 `protobuf:"bytes,19,opt,name=container_config_certificate,json=containerConfigCertificate" json:"container_config_certificate,omitempty"` // sw signing certificate to verify the signature on the container config file
	ExecCommand                *string                `protobuf:"bytes,14,opt,name=exec_command,json=execCommand" json:"exec_command,omitempty"`                                                // command to execute in container context
	ExecArgs                   []string               `protobuf:"bytes,15,rep,name=exec_args,json=execArgs" json:"exec_args,omitempty"`                                                         // arguments for command to be executed
	ExecPty                    *bool                  `protobuf:"varint,16,opt,name=exec_pty,json=execPty,def=0" json:"exec_pty,omitempty"`                                                     // assign pty to command
	ExecInput                  *string                `protobuf:"bytes,17,opt,name=exec_input,json=execInput" json:"exec_input,omitempty"`                                                      // input to be sent to already executing command
	// Daemon
	GuestosConfigFile        []byte  `protobuf:"bytes,20,opt,name=guestos_config_file,json=guestosConfigFile" json:"guestos_config_file,omitempty"`                      // new/updated GuestOS config for PUSH_GUESTOS_CONFIG
	GuestosConfigSignature   []byte  `protobuf:"bytes,21,opt,name=guestos_config_signature,json=guestosConfigSignature" json:"guestos_config_signature,omitempty"`       // signature of the GuestOS config file
	GuestosConfigCertificate []byte  `protobuf:"bytes,22,opt,name=guestos_config_certificate,json=guestosConfigCertificate" json:"guestos_config_certificate,omitempty"` // sw signing certificate to verify the signature on the config file
	GuestosRootcert          []byte  `protobuf:"bytes,23,opt,name=guestos_rootcert,json=guestosRootcert" json:"guestos_rootcert,omitempty"`                              // rootca certificate for local or new CAs to verify GuestOSes
	GuestosName              *string `protobuf:"bytes,24,opt,name=guestos_name,json=guestosName" json:"guestos_name,omitempty"`                                          // name of a GuestOS (e.g. used in remove command)
	DeviceCert               []byte  `protobuf:"bytes,41,opt,name=device_cert,json=deviceCert" json:"device_cert,omitempty"`                                             // device cert for PUSH_DEVICE_CERT
	DevicePin                *string `protobuf:"bytes,42,opt,name=device_pin,json=devicePin" json:"device_pin,omitempty"`                                                // pin for token for CHANGE_DEVICE_PIN
	DeviceNewpin             *string `protobuf:"bytes,43,opt,name=device_newpin,json=deviceNewpin" json:"device_newpin,omitempty"`                                       // new pin for token  for CHANGE_DEVICE_PIN)
}

// Default values for ControllerToDaemon fields.
const (
	Default_ControllerToDaemon_ExecPty = bool(false)
)

func (x *ControllerToDaemon) Reset() {
	*x = ControllerToDaemon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerToDaemon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerToDaemon) ProtoMessage() {}

func (x *ControllerToDaemon) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerToDaemon.ProtoReflect.Descriptor instead.
func (*ControllerToDaemon) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{2}
}

func (x *ControllerToDaemon) GetCommand() ControllerToDaemon_Command {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ControllerToDaemon_LIST_GUESTOS_CONFIGS
}

func (x *ControllerToDaemon) GetContainerUuids() []string {
	if x != nil {
		return x.ContainerUuids
	}
	return nil
}

func (x *ControllerToDaemon) GetContainerStartParams() *ContainerStartParams {
	if x != nil {
		return x.ContainerStartParams
	}
	return nil
}

func (x *ControllerToDaemon) GetAssignIfaceParams() *AssignInterfaceParams {
	if x != nil {
		return x.AssignIfaceParams
	}
	return nil
}

func (x *ControllerToDaemon) GetContainerConfigFile() []byte {
	if x != nil {
		return x.ContainerConfigFile
	}
	return nil
}

func (x *ControllerToDaemon) GetContainerConfigSignature() []byte {
	if x != nil {
		return x.ContainerConfigSignature
	}
	return nil
}

func (x *ControllerToDaemon) GetContainerConfigCertificate() []byte {
	if x != nil {
		return x.ContainerConfigCertificate
	}
	return nil
}

func (x *ControllerToDaemon) GetExecCommand() string {
	if x != nil && x.ExecCommand != nil {
		return *x.ExecCommand
	}
	return ""
}

func (x *ControllerToDaemon) GetExecArgs() []string {
	if x != nil {
		return x.ExecArgs
	}
	return nil
}

func (x *ControllerToDaemon) GetExecPty() bool {
	if x != nil && x.ExecPty != nil {
		return *x.ExecPty
	}
	return Default_ControllerToDaemon_ExecPty
}

func (x *ControllerToDaemon) GetExecInput() string {
	if x != nil && x.ExecInput != nil {
		return *x.ExecInput
	}
	return ""
}

func (x *ControllerToDaemon) GetGuestosConfigFile() []byte {
	if x != nil {
		return x.GuestosConfigFile
	}
	return nil
}

func (x *ControllerToDaemon) GetGuestosConfigSignature() []byte {
	if x != nil {
		return x.GuestosConfigSignature
	}
	return nil
}

func (x *ControllerToDaemon) GetGuestosConfigCertificate() []byte {
	if x != nil {
		return x.GuestosConfigCertificate
	}
	return nil
}

func (x *ControllerToDaemon) GetGuestosRootcert() []byte {
	if x != nil {
		return x.GuestosRootcert
	}
	return nil
}

func (x *ControllerToDaemon) GetGuestosName() string {
	if x != nil && x.GuestosName != nil {
		return *x.GuestosName
	}
	return ""
}

func (x *ControllerToDaemon) GetDeviceCert() []byte {
	if x != nil {
		return x.DeviceCert
	}
	return nil
}

func (x *ControllerToDaemon) GetDevicePin() string {
	if x != nil && x.DevicePin != nil {
		return *x.DevicePin
	}
	return ""
}

func (x *ControllerToDaemon) GetDeviceNewpin() string {
	if x != nil && x.DeviceNewpin != nil {
		return *x.DeviceNewpin
	}
	return ""
}

// *
// Control message sent from the cml-daemon on the device to the backend/cmdline tool/etc.
type DaemonToController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                    *DaemonToController_Code     `protobuf:"varint,1,req,name=code,enum=main.DaemonToController_Code" json:"code,omitempty"`
	GuestosConfigs          []*GuestOSConfig             `protobuf:"bytes,5,rep,name=guestos_configs,json=guestosConfigs" json:"guestos_configs,omitempty"`                                  // GuestOS configs for LIST_GUESTOS_CONFIGS
	ContainerUuids          []string                     `protobuf:"bytes,6,rep,name=container_uuids,json=containerUuids" json:"container_uuids,omitempty"`                                  // UUIDs for LIST_CONTAINERS
	ContainerStatus         []*ContainerStatus           `protobuf:"bytes,7,rep,name=container_status,json=containerStatus" json:"container_status,omitempty"`                               // ContainerStatus(es) for GET_CONTAINER_STATUS
	ContainerConfigs        []*ContainerConfig           `protobuf:"bytes,8,rep,name=container_configs,json=containerConfigs" json:"container_configs,omitempty"`                            // ContainerConfig(s) for GET_CONTAINER_CONFIG
	ContainerIfaces         []string                     `protobuf:"bytes,9,rep,name=container_ifaces,json=containerIfaces" json:"container_ifaces,omitempty"`                               // Container network interface(s) for CONTAINER_LIST_IFACES
	ContainerCmldHandlesPin *bool                        `protobuf:"varint,11,opt,name=container_cmld_handles_pin,json=containerCmldHandlesPin" json:"container_cmld_handles_pin,omitempty"` // Indicate that CMLD handles pin input for container start and stop
	LogMessage              *LogMessage                  `protobuf:"bytes,12,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`                                             // log message received because of OBSERVE_LOG_START
	Response                *DaemonToController_Response `protobuf:"varint,13,opt,name=response,enum=main.DaemonToController_Response" json:"response,omitempty"`
	DeviceCsr               []byte                       `protobuf:"bytes,40,opt,name=device_csr,json=deviceCsr" json:"device_csr,omitempty"`                                  // device_csr for DEVICE_CSR (provisioning)
	DeviceUuid              *string                      `protobuf:"bytes,200,opt,name=device_uuid,json=deviceUuid" json:"device_uuid,omitempty"`                              // Device UUID for LOGON_DEVICE and LOG_MESSAGE
	LogonHardwareName       *string                      `protobuf:"bytes,201,opt,name=logon_hardware_name,json=logonHardwareName" json:"logon_hardware_name,omitempty"`       // Hardware name (e.g. "i9505", "hammerhead", ...) for LOGON_DEVICE
	LogonHardwareSerial     *string                      `protobuf:"bytes,202,opt,name=logon_hardware_serial,json=logonHardwareSerial" json:"logon_hardware_serial,omitempty"` // Hardware serial number for LOGON_DEVICE
	LogonImei               *string                      `protobuf:"bytes,203,opt,name=logon_imei,json=logonImei" json:"logon_imei,omitempty"`                                 // IMEI for LOGON_DEVICE
	LogonMacAddress         *string                      `protobuf:"bytes,204,opt,name=logon_mac_address,json=logonMacAddress" json:"logon_mac_address,omitempty"`             // MAC address for LOGON_DEVICE
	LogonPhoneNumber        *string                      `protobuf:"bytes,205,opt,name=logon_phone_number,json=logonPhoneNumber" json:"logon_phone_number,omitempty"`          // Phone number for LOGON_DEVICE
	ExecEndReason           *string                      `protobuf:"bytes,206,opt,name=exec_end_reason,json=execEndReason" json:"exec_end_reason,omitempty"`
	ExecOutput              []byte                       `protobuf:"bytes,207,opt,name=exec_output,json=execOutput" json:"exec_output,omitempty"`
}

func (x *DaemonToController) Reset() {
	*x = DaemonToController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonToController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonToController) ProtoMessage() {}

func (x *DaemonToController) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonToController.ProtoReflect.Descriptor instead.
func (*DaemonToController) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3}
}

func (x *DaemonToController) GetCode() DaemonToController_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return DaemonToController_GUESTOS_CONFIGS_LIST
}

func (x *DaemonToController) GetGuestosConfigs() []*GuestOSConfig {
	if x != nil {
		return x.GuestosConfigs
	}
	return nil
}

func (x *DaemonToController) GetContainerUuids() []string {
	if x != nil {
		return x.ContainerUuids
	}
	return nil
}

func (x *DaemonToController) GetContainerStatus() []*ContainerStatus {
	if x != nil {
		return x.ContainerStatus
	}
	return nil
}

func (x *DaemonToController) GetContainerConfigs() []*ContainerConfig {
	if x != nil {
		return x.ContainerConfigs
	}
	return nil
}

func (x *DaemonToController) GetContainerIfaces() []string {
	if x != nil {
		return x.ContainerIfaces
	}
	return nil
}

func (x *DaemonToController) GetContainerCmldHandlesPin() bool {
	if x != nil && x.ContainerCmldHandlesPin != nil {
		return *x.ContainerCmldHandlesPin
	}
	return false
}

func (x *DaemonToController) GetLogMessage() *LogMessage {
	if x != nil {
		return x.LogMessage
	}
	return nil
}

func (x *DaemonToController) GetResponse() DaemonToController_Response {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return DaemonToController_CONTAINER_START_OK
}

func (x *DaemonToController) GetDeviceCsr() []byte {
	if x != nil {
		return x.DeviceCsr
	}
	return nil
}

func (x *DaemonToController) GetDeviceUuid() string {
	if x != nil && x.DeviceUuid != nil {
		return *x.DeviceUuid
	}
	return ""
}

func (x *DaemonToController) GetLogonHardwareName() string {
	if x != nil && x.LogonHardwareName != nil {
		return *x.LogonHardwareName
	}
	return ""
}

func (x *DaemonToController) GetLogonHardwareSerial() string {
	if x != nil && x.LogonHardwareSerial != nil {
		return *x.LogonHardwareSerial
	}
	return ""
}

func (x *DaemonToController) GetLogonImei() string {
	if x != nil && x.LogonImei != nil {
		return *x.LogonImei
	}
	return ""
}

func (x *DaemonToController) GetLogonMacAddress() string {
	if x != nil && x.LogonMacAddress != nil {
		return *x.LogonMacAddress
	}
	return ""
}

func (x *DaemonToController) GetLogonPhoneNumber() string {
	if x != nil && x.LogonPhoneNumber != nil {
		return *x.LogonPhoneNumber
	}
	return ""
}

func (x *DaemonToController) GetExecEndReason() string {
	if x != nil && x.ExecEndReason != nil {
		return *x.ExecEndReason
	}
	return ""
}

func (x *DaemonToController) GetExecOutput() []byte {
	if x != nil {
		return x.ExecOutput
	}
	return nil
}

var File_control_proto protoreflect.FileDescriptor

var file_control_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6c, 0x6f, 0x67, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x80, 0x01, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x22, 0x5d, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xec, 0x0d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54,
	0x6f, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b,
	0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x66, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x70, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x50, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x65, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x65, 0x77, 0x70, 0x69, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x70, 0x69, 0x6e, 0x22, 0xc1, 0x06, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x47, 0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45,
	0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x53, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x43, 0x41, 0x10, 0x18, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x43, 0x41,
	0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x47, 0x55, 0x45,
	0x53, 0x54, 0x4f, 0x53, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x42, 0x4f, 0x4f,
	0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x20, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x53, 0x52, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x10,
	0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x67,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5a, 0x45, 0x10, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x69, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x50, 0x45,
	0x10, 0x6a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x6b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x6d, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x49, 0x46, 0x41, 0x43, 0x45, 0x10, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x46,
	0x41, 0x43, 0x45, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x46, 0x41, 0x43, 0x45, 0x53, 0x10, 0x70,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x73, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x74, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x4c,
	0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x75, 0x22,
	0xa7, 0x10, 0x0a, 0x12, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x73,
	0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63,
	0x6d, 0x6c, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6d, 0x6c, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x50, 0x69, 0x6e, 0x12, 0x31,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x73, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x65, 0x69, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x6f, 0x6e, 0x49, 0x6d, 0x65, 0x69, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xcc, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0xcf, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x8a,
	0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55, 0x45, 0x53, 0x54,
	0x4f, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x49, 0x46, 0x41, 0x43, 0x45, 0x53, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x53, 0x52, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0xc8, 0x01, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22,
	0x04, 0x08, 0x0a, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x0b, 0x10, 0x0b, 0x22, 0x95, 0x07, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x5f, 0x57,
	0x52, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x50,
	0x41, 0x49, 0x52, 0x45, 0x44, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4b, 0x10, 0x15, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x16, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x17,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x10,
	0x18, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x45, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x42, 0x5f,
	0x50, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x14,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55,
	0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d,
	0x47, 0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12,
	0x21, 0x0a, 0x1d, 0x47, 0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x45, 0x53, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x47,
	0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x5f, 0x4f, 0x4b,
	0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4d, 0x44, 0x5f, 0x4f,
	0x4b, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x1e, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x42, 0x24, 0x0a, 0x1b, 0x64, 0x65, 0x2e,
	0x66, 0x72, 0x61, 0x75, 0x6e, 0x68, 0x6f, 0x66, 0x65, 0x72, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x63,
	0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x5a, 0x05, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
}

var (
	file_control_proto_rawDescOnce sync.Once
	file_control_proto_rawDescData = file_control_proto_rawDesc
)

func file_control_proto_rawDescGZIP() []byte {
	file_control_proto_rawDescOnce.Do(func() {
		file_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_proto_rawDescData)
	})
	return file_control_proto_rawDescData
}

var file_control_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_control_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_control_proto_goTypes = []interface{}{
	(ControllerToDaemon_Command)(0),  // 0: main.ControllerToDaemon.Command
	(DaemonToController_Code)(0),     // 1: main.DaemonToController.Code
	(DaemonToController_Response)(0), // 2: main.DaemonToController.Response
	(*ContainerStartParams)(nil),     // 3: main.ContainerStartParams
	(*AssignInterfaceParams)(nil),    // 4: main.AssignInterfaceParams
	(*ControllerToDaemon)(nil),       // 5: main.ControllerToDaemon
	(*DaemonToController)(nil),       // 6: main.DaemonToController
	(*GuestOSConfig)(nil),            // 7: main.GuestOSConfig
	(*ContainerStatus)(nil),          // 8: main.ContainerStatus
	(*ContainerConfig)(nil),          // 9: main.ContainerConfig
	(*LogMessage)(nil),               // 10: main.LogMessage
}
var file_control_proto_depIdxs = []int32{
	0,  // 0: main.ControllerToDaemon.command:type_name -> main.ControllerToDaemon.Command
	3,  // 1: main.ControllerToDaemon.container_start_params:type_name -> main.ContainerStartParams
	4,  // 2: main.ControllerToDaemon.assign_iface_params:type_name -> main.AssignInterfaceParams
	1,  // 3: main.DaemonToController.code:type_name -> main.DaemonToController.Code
	7,  // 4: main.DaemonToController.guestos_configs:type_name -> main.GuestOSConfig
	8,  // 5: main.DaemonToController.container_status:type_name -> main.ContainerStatus
	9,  // 6: main.DaemonToController.container_configs:type_name -> main.ContainerConfig
	10, // 7: main.DaemonToController.log_message:type_name -> main.LogMessage
	2,  // 8: main.DaemonToController.response:type_name -> main.DaemonToController.Response
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_control_proto_init() }
func file_control_proto_init() {
	if File_control_proto != nil {
		return
	}
	file_guestos_proto_init()
	file_container_proto_init()
	file_logf_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStartParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignInterfaceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerToDaemon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonToController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_proto_goTypes,
		DependencyIndexes: file_control_proto_depIdxs,
		EnumInfos:         file_control_proto_enumTypes,
		MessageInfos:      file_control_proto_msgTypes,
	}.Build()
	File_control_proto = out.File
	file_control_proto_rawDesc = nil
	file_control_proto_goTypes = nil
	file_control_proto_depIdxs = nil
}
